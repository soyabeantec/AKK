    Home (current)
    About
    More Languages
    Python Java HTML Go C C++ JavaScript PHP Shell C# Perl Ruby Scala SQL

    Python
    Java
    HTML
    Go
    C
    C++
    JavaScript
    PHP
    Shell
    C#
    Perl
    Ruby
    Scala
    SQL

Tweet

    Welcome /
    Conditions

Get started learning Python with DataCamp's free Intro to Python tutorial . Learn Data Science by completing interactive coding challenges and watching videos by expert instructors. Start Now !
Conditions

Python uses boolean variables to evaluate conditions. The boolean values True and False are returned when an expression is compared or evaluated. For example:
x = 2 print(x == 2) # prints out True print(x == 3) # prints out False print(x < 3) # prints out True

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
x = 2
print ( x == 2 ) # prints out True
print ( x == 3 ) # prints out False
print ( x < 3 ) # prints out True
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp

Notice that variable assignment is done using a single equals operator "=", whereas comparison between two variables is done using the double equals operator "==". The "not equals" operator is marked as "!=".
Boolean operators

The "and" and "or" boolean operators allow building complex boolean expressions, for example:
name = "John" age = 23 if name == "John" and age == 23: print("Your name is John, and you are also 23 years old.") if name == "John" or name == "Rick": print("Your name is either John or Rick.")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
5
6
7
name = "John"
age = 23
if name == "John" and age == 23 :
print ( "Your name is John, and you are
also 23 years old." )
if name == "John" or name == "Rick" :
print ( "Your name is either John or
Rick." )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
The "in" operator

The "in" operator could be used to check if a specified object exists within an iterable object container, such as a list:
name = "John" if name in ["John", "Rick"]: print("Your name is either John or Rick.")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
name = "John"
if name in [ "John" , "Rick" ] :
print ( "Your name is either John or
Rick." )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Python uses indentation to define code blocks, instead of brackets. The standard Python indentation is 4 spaces, although tabs and any other space size will work, as long as it is consistent. Notice that code blocks do not need any termination.

Here is an example for using Python's "if" statement using code blocks:
if : .... .... elif : # else if .... .... else: .... ....

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
5
6
7
8
9
10
11
12
13
if < statement is = "" true = "" > :
< do something = "" >
....
....
elif < another statement = "" is = "" true = ""
> : # else if
< do something = "" else = "" >
....
....
else :
< do another = "" thing = "" >
....
....
</ do ></ do ></ another ></ do ></ statement >
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

For example:
x = 2 if x == 2: print("x equals two!") else: print("x does not equal to two.")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
5
x = 2
if x == 2 :
print ( "x equals two!" )
else :
print ( "x does not equal to two." )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

A statement is evaulated as true if one of the following is correct: 1. The "True" boolean variable is given, or calculated using an expression, such as an arithmetic comparison. 2. An object which is not considered "empty" is passed.

Here are some examples for objects which are considered as empty: 1. An empty string: "" 2. An empty list: [] 3. The number zero: 0 4. The false boolean variable: False
The 'is' operator

Unlike the double equals operator "==", the "is" operator does not match the values of the variables, but the instances themselves. For example:
x = [1,2,3] y = [1,2,3] print(x == y) # Prints out True print(x is y) # Prints out False

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
x = [ 1 , 2 , 3 ]
y = [ 1 , 2 , 3 ]
print ( x == y ) # Prints out True
print ( x is y ) # Prints out False
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
The "not" operator

Using "not" before a boolean expression inverts it:
print(not False) # Prints out True print((not False) == (False)) # Prints out False

    script.py
    solution.py
    IPython Shell
    Plots


1
2
print ( not False ) # Prints out True
print (( not False ) == ( False )) # Prints out
False
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
Exercise

Change the variables in the first section, so that each if statement resolves as True.
# change this code number = 10 second_number = 10 first_array = [] second_array = [1,2,3] if number > 15: print("1") if first_array: print("2") if len(second_array) == 2: print("3") if len(first_array) + len(second_array) == 5: print("4") if first_array and first_array[0] == 1: print("5") if not second_number: print("6") # change this code number = 16 second_number = 0 first_array = [1,2,3] second_array = [1,2] if number > 15: print("1") if first_array: print("2") if len(second_array) == 2: print("3") if len(first_array) + len(second_array) == 5: print("4") if first_array and first_array[0] == 1: print("5") if not second_number: print("6") test_output_contains("1", no_output_msg= "Did you print out 1 if `number` is greater than 15?") test_output_contains("2", no_output_msg= "Did you print out 2 if there exists a list `first_array`?") test_output_contains("3", no_output_msg= "Did you print out 3 if the length of `second_array` is 2?") test_output_contains("4", no_output_msg= "Did you print out 4 if len(first_array) + len(second_array) == 5?") test_output_contains("5", no_output_msg= "Did you print out 5 if first_array and first_array[0] == 1?") test_output_contains("6", no_output_msg= "Did you print out 6 if not second_number?") success_msg("Great Work!")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
# change this code
number = 10
second_number = 10
first_array = [ ]
second_array = [ 1 , 2 , 3 ]
if number > 15 :
print ( "1" )
if first_array :
print ( "2" )
if len ( second_array ) == 2 :
print ( "3" )
if len ( first_array ) + len ( second_array
) == 5 :
print ( "4" )
if first_array and first_array [ 0 ] == 1
:
print ( "5" )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join over a million other learners and get started learning Python for data science today!
Previous Tutorial Next Tutorial
Start your future with a Data Science Certificate.
Sponsors
Copyright Â© learnpython.org. Read our Terms of Use and Privacy Policy
