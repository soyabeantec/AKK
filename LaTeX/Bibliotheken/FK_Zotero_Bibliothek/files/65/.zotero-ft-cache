    Home (current)
    About
    More Languages
    Python Java HTML Go C C++ JavaScript PHP Shell C# Perl Ruby Scala SQL

    Python
    Java
    HTML
    Go
    C
    C++
    JavaScript
    PHP
    Shell
    C#
    Perl
    Ruby
    Scala
    SQL

Weiterempfehlen 16.2K

    Welcome /
    Classes and Objects

Get started learning Python with DataCamp's free Intro to Python tutorial . Learn Data Science by completing interactive coding challenges and watching videos by expert instructors. Start Now !
Classes and Objects

Objects are an encapsulation of variables and functions into a single entity. Objects get their variables and functions from classes. Classes are essentially a template to create your objects.

A very basic class would look something like this:
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.")

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

We'll explain why you have to include that "self" as a parameter a little bit later. First, to assign the above class(template) to an object you would do the following:
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.") myobjectx = MyClass()

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
myobjectx = MyClass ( )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Now the variable "myobjectx" holds an object of the class "MyClass" that contains the variable and the function defined within the class called "MyClass".
Accessing Object Variables

To access the variable inside of the newly created object "myobjectx" you would do the following:
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.") myobjectx = MyClass() myobjectx.variable

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
8
9
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
myobjectx = MyClass ( )
myobjectx . variable
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

So for instance the below would output the string "blah":
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.") myobjectx = MyClass() print(myobjectx.variable)

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
8
9
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
myobjectx = MyClass ( )
print ( myobjectx . variable )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

You can create multiple different objects that are of the same class(have the same variables and functions defined). However, each object contains independent copies of the variables defined in the class. For instance, if we were to define another object with the "MyClass" class and then change the string in the variable above:
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.") myobjectx = MyClass() myobjecty = MyClass() myobjecty.variable = "yackity" # Then print out both values print(myobjectx.variable) print(myobjecty.variable)

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
8
9
10
11
12
13
14
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
myobjectx = MyClass ( )
myobjecty = MyClass ( )
myobjecty . variable = "yackity"
# Then print out both values
print ( myobjectx . variable )
print ( myobjecty . variable )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
Accessing Object Functions

To access a function inside of an object you use notation similar to accessing a variable:
class MyClass: variable = "blah" def function(self): print("This is a message inside the class.") myobjectx = MyClass() myobjectx.function()

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
8
9
class MyClass :
variable = "blah"
def function ( self ) :
print ( "This is a message inside the class." )
myobjectx = MyClass ( )
myobjectx . function ( )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

The above would print out the message, "This is a message inside the class."
Exercise

We have a class defined for vehicles. Create two new vehicles called car1 and car2. Set car1 to be a red convertible worth $60,000.00 with a name of Fer, and car2 to be a blue van named Jump worth $10,000.00.
# define the Vehicle class class Vehicle: name = "" kind = "car" color = "" value = 100.00 def description(self): desc_str = "%s is a %s %s worth $%.2f." % (self.name, self.color, self.kind, self.value) return desc_str # your code goes here # test code print(car1.description()) print(car2.description()) # define the Vehicle class class Vehicle: name = "" kind = "car" color = "" value = 100.00 def description(self): desc_str = "%s is a %s %s worth $%.2f." % (self.name, self.color, self.kind, self.value) return desc_str # your code goes here car1 = Vehicle() car1.name = "Fer" car1.color = "red" car1.kind = "convertible" car1.value = 60000.00 car2 = Vehicle() car2.name = "Jump" car2.color = "blue" car2.kind = "van" car2.value = 10000.00 # test code print(car1.description()) print(car2.description()) #test_output_contains('Fer is a red convertible worth $60000.00.') #test_output_contains('Jump is a blue van worth $10000.00.') success_msg("Great job!")

    script.py
    solution.py
    IPython Shell
    Plots

1
2
3
4
5
6
7
8
9
10
11
12
13
14
# define the Vehicle class
class Vehicle :
name = ""
kind = "car"
color = ""
value = 100.00
def description ( self ) :
desc_str = "%s is a %s %s worth $%.2f." % ( self
. name , self . color , self . kind , self . value )
return desc_str
# your code goes here
# test code
print ( car1 . description ( ))
print ( car2 . description ( ))
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots

In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join over a million other learners and get started learning Python for data science today!
Previous Tutorial Next Tutorial
Start your future with a Data Science Certificate.
Sponsors
Copyright Â© learnpython.org. Read our Terms of Use and Privacy Policy
