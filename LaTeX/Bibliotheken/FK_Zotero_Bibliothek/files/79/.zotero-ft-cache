    Home (current)
    About
    More Languages
    Python Java HTML Go C C++ JavaScript PHP Shell C# Perl Ruby Scala SQL

    Python
    Java
    HTML
    Go
    C
    C++
    JavaScript
    PHP
    Shell
    C#
    Perl
    Ruby
    Scala
    SQL

Tweet

    Welcome /
    Basic Operators

Get started learning Python with DataCamp's free Intro to Python tutorial . Learn Data Science by completing interactive coding challenges and watching videos by expert instructors. Start Now !
Basic Operators

This section explains how to use basic operators in Python.
Arithmetic Operators

Just as any other programming languages, the addition, subtraction, multiplication, and division operators can be used with numbers.
number = 1 + 2 * 3 / 4.0 print(number)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
number = 1 + 2 * 3 / 4.0
print ( number )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Try to predict what the answer will be. Does python follow order of operations?

Another operator available is the modulo (%) operator, which returns the integer remainder of the division. dividend % divisor = remainder.
remainder = 11 % 3 print(remainder)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
remainder = 11 % 3
print ( remainder )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Using two multiplication symbols makes a power relationship.
squared = 7 ** 2 cubed = 2 ** 3 print(squared) print(cubed)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
squared = 7 ** 2
cubed = 2 ** 3
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
Using Operators with Strings

Python supports concatenating strings using the addition operator:
helloworld = "hello" + " " + "world" print(helloworld)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
helloworld = "hello" + " " + "world"
print ( helloworld )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Python also supports multiplying strings to form a string with a repeating sequence:
lotsofhellos = "hello" * 10 print(lotsofhellos)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
lotsofhellos = "hello" * 10
print ( lotsofhellos )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
Using Operators with Lists

Lists can be joined with the addition operators:
even_numbers = [2,4,6,8] odd_numbers = [1,3,5,7] all_numbers = odd_numbers + even_numbers print(all_numbers)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
even_numbers = [ 2 , 4 , 6 , 8 ]
odd_numbers = [ 1 , 3 , 5 , 7 ]
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

Just as in strings, Python supports forming new lists with a repeating sequence using the multiplication operator:
print([1,2,3] * 3)

    script.py
    solution.py
    IPython Shell
    Plots


1
print ([ 1 , 2 , 3 ] * 3 )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp
Exercise

The target of this exercise is to create two lists called x_list and y_list , which contain 10 instances of the variables x and y , respectively. You are also required to create a list called big_list , which contains the variables x and y , 10 times each, by concatenating the two lists you have created.
x = object() y = object() # TODO: change this code x_list = [x] y_list = [y] big_list = [] print("x_list contains %d objects" % len(x_list)) print("y_list contains %d objects" % len(y_list)) print("big_list contains %d objects" % len(big_list)) # testing code if x_list.count(x) == 10 and y_list.count(y) == 10: print("Almost there...") if big_list.count(x) == 10 and big_list.count(y) == 10: print("Great!") x = object() y = object() # TODO: change this code x_list = [x] * 10 y_list = [y] * 10 big_list = x_list + y_list print("x_list contains %d objects" % len(x_list)) print("y_list contains %d objects" % len(y_list)) print("big_list contains %d objects" % len(big_list)) # testing code if x_list.count(x) == 10 and y_list.count(y) == 10: print("Almost there...") if big_list.count(x) == 10 and big_list.count(y) == 10: print("Great!") Ex().check_object('x_list').has_equal_value(expr_code = 'len(x_list)') Ex().check_object('y_list').has_equal_value(expr_code = 'len(y_list)') Ex().check_object('big_list').has_equal_value(expr_code = 'len(big_list)') success_msg('Good work!')

    script.py
    solution.py
    IPython Shell
    Plots


1
2
x = object ( )
y = object ( )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    IPython Shell
    Plots


In [1]:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0
Hint Solution Run Session Inactive
Powered by DataCamp

This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join over a million other learners and get started learning Python for data science today!
Previous Tutorial Next Tutorial
Start your future with a Data Science Certificate.
Sponsors
Copyright Â© learnpython.org. Read our Terms of Use and Privacy Policy
