    Home (current)
    About
    More Languages
    Python Java HTML Go C C++ JavaScript PHP Shell C# Perl Ruby Scala SQL

    Python
    Java
    HTML
    Go
    C
    C++
    JavaScript
    PHP
    Shell
    C#
    Perl
    Ruby
    Scala
    SQL

Tweet
Weiterempfehlen 16.1K

    Welcome /
    Functions

Get started learning Python with DataCamp's free Intro to Python tutorial . Learn Data Science by completing interactive coding challenges and watching videos by expert instructors. Start Now !
Functions
What are Functions?

Functions are a convenient way to divide your code into useful blocks, allowing us to order our code, make it more readable, reuse it and save some time. Also functions are a key way to define interfaces so programmers can share their code.
How do you write functions in Python?

As we have seen on previous tutorials, Python makes use of blocks.

A block is a area of code of written in the format of:
block_head: 1st block line 2nd block line ...

    script.py
    solution.py
    IPython Shell
    Plots


1
2
block_head :
1 st block line
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp

Where a block line is more Python code (even another block), and the block head is of the following format: block_keyword block_name(argument1,argument2, ...) Block keywords you already know are "if", "for", and "while".

Functions in python are defined using the block keyword "def", followed with the function's name as the block's name. For example:
def my_function(): print("Hello From My Function!")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
def my_function ( ) :
print ( "Hello From My Function!" )
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp

Functions may also receive arguments (variables passed from the caller to the function). For example:
def my_function_with_args(username, greeting): print("Hello, %s , From My Function!, I wish you %s"%(username, greeting))

    script.py
    solution.py
    IPython Shell
    Plots


1
2
def my_function_with_args ( username , greeting ) :
print ( "Hello, %s , From My Function!, I wish you %s" % ( username , greeting ))
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp

Functions may return a value to the caller, using the keyword- 'return' . For example:
def sum_two_numbers(a, b): return a + b

    script.py
    solution.py
    IPython Shell
    Plots


1
2
def sum_two_numbers ( a , b ) :
return a + b
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp
How do you call functions in Python?

Simply write the function's name followed by (), placing any required arguments within the brackets. For example, lets call the functions written above (in the previous example):
# Define our 3 functions def my_function(): print("Hello From My Function!") def my_function_with_args(username, greeting): print("Hello, %s , From My Function!, I wish you %s"%(username, greeting)) def sum_two_numbers(a, b): return a + b # print(a simple greeting) my_function() #prints - "Hello, John Doe, From My Function!, I wish you a great year!" my_function_with_args("John Doe", "a great year!") # after this line x will hold the value 3! x = sum_two_numbers(1,2)

    script.py
    solution.py
    IPython Shell
    Plots


1
2
# Define our 3 functions
def my_function ( ) :
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp
Exercise

In this exercise you'll use an existing function, and while adding your own to create a fully functional program.

    Add a function named list_benefits() that returns the following list of strings: "More organized code", "More readable code", "Easier code reuse", "Allowing programmers to share and connect code together"

    Add a function named build_sentence(info) which receives a single argument containing a string and returns a sentence starting with the given string and ending with the string " is a benefit of functions!"

    Run and see all the functions work together!

# Modify this function to return a list of strings as defined above def list_benefits(): pass # Modify this function to concatenate to each benefit - " is a benefit of functions!" def build_sentence(benefit): pass def name_the_benefits_of_functions(): list_of_benefits = list_benefits() for benefit in list_of_benefits: print(build_sentence(benefit)) name_the_benefits_of_functions() # Modify this function to return a list of strings as defined above def list_benefits(): return "More organized code", "More readable code", "Easier code reuse", "Allowing programmers to share and connect code together" # Modify this function to concatenate to each benefit - " is a benefit of functions!" def build_sentence(benefit): return "%s is a benefit of functions!" % benefit def name_the_benefits_of_functions(): list_of_benefits = list_benefits() for benefit in list_of_benefits: print(build_sentence(benefit)) name_the_benefits_of_functions() test_output_contains("More organized code is a benefit of functions!") test_output_contains("More readable code is a benefit of functions!") test_output_contains("Easier code reuse is a benefit of functions!") test_output_contains("Allowing programmers to share and connect code together is a benefit of functions!") success_msg("Nice work!")

    script.py
    solution.py
    IPython Shell
    Plots


1
2
# Modify this function to return a list of strings as defined above
def list_benefits ( ) :
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
1/0 0/0

    IPython Shell
    Plots

Hint Solution Run Session Inactive
Powered by DataCamp

This site is generously supported by DataCamp . DataCamp offers online interactive Python Tutorials for Data Science. Join over a million other learners and get started learning Python for data science today!
Previous Tutorial Next Tutorial
Start your future with a Data Science Certificate.
Sponsors
Copyright Â© learnpython.org. Read our Terms of Use and Privacy Policy
